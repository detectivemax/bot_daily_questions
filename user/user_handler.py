import asyncio
import datetime

from config.config import ADMIN_ID
from functions import bd_set, bd_get_one, bd_get_many, get_time, get_date
from main import bot, dp, types
from payment.payment import user_send_pay
from user.questions import QUESTIONS, ARTICLES, DAILY_PLAN

from user.user_kb import user_q_done_kb, user_reg_1_kb, user_reg_2_kb, user_reg_3_kb, user_reg_4_kb, user_reg_5_kb, \
    user_reg_6_kb, user_day_done_kb


# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
@dp.callback_query_handler(text_contains='user_start_work')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id
    data = str(callback.data).replace('user_start_work', '')

    stage = bd_get_one(f"SELECT stage_three FROM user_stage WHERE user_id == '{user_id}'")
    if stage == '1':
        question = get_question_text(user_id)

        check_trigger(user_id)
        bd_set(f"UPDATE user_stage SET stage_one = '{11}' WHERE user_id = '{user_id}'")
        await bot.send_message(user_id, question)


async def user_question_ans(message):
    user_id = message.from_user.id
    check_trigger(user_id)
    stage_one = int(bd_get_one(f"SELECT stage_one FROM user_stage WHERE user_id = '{user_id}'"))
    stage_two = int(bd_get_one(f"SELECT stage_two FROM user_stage WHERE user_id == '{user_id}'"))
    stage_three = int(bd_get_one(f"SELECT stage_three FROM user_stage WHERE user_id = '{user_id}'"))
    question = bd_get_one(f"SELECT plan FROM user_last_q WHERE user_id = '{user_id}'")
    question = stage_one - 10 + question

    if message.text == "üëâ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" and stage_two >= 5:
        bd_set(f"UPDATE user_stage SET stage_two = '{0}' WHERE user_id = '{user_id}'")
        bd_set(f"UPDATE user_stage SET stage_one = '{stage_one + 1}' WHERE user_id = '{user_id}'")

        question = QUESTIONS[str(question)]
        await bot.send_message(user_id, question, reply_markup=types.ReplyKeyboardRemove())

    else:
        bd_set(f"UPDATE user_stage SET stage_two = '{stage_two + 1}' WHERE user_id = '{user_id}'")
        daily_plan = DAILY_PLAN[str(stage_three % 7)]
        print(daily_plan)
        print(stage_two, stage_one, 10 + daily_plan)

        if stage_two + 1 >= 5 and stage_one < 10 + daily_plan:
            await bot.send_message(user_id, "–î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'",
                                   reply_markup=user_q_done_kb())

        elif stage_two + 1 >= 5 and stage_one >= 10 + daily_plan\
                and message.text == "üëç –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
            bd_set(f"UPDATE user_stage SET stage_three = '{int(stage_three) + 1}' WHERE user_id = '{user_id}'")
            bd_set(f"UPDATE user_stage SET stage_one = '{0}' WHERE user_id = '{user_id}'")
            bd_set(f"UPDATE user_stage SET stage_two = '{0}' WHERE user_id = '{user_id}'")
            bd_set(f"UPDATE user_last_q SET plan = '{question}' WHERE user_id = '{user_id}'")
            bd_set(f"UPDATE user_last_q SET time = '{0}' WHERE user_id = '{user_id}'")

            await bot.send_message(user_id, f"–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª {stage_three} –¥–µ–Ω—å –∏–∑ 200! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!", reply_markup=types.ReplyKeyboardRemove())
            if int(stage_three) % 6 == 0:
                text = '–£—Ä–∞ –Ω–µ–¥–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–æ–π –∫–æ–º–∞–Ω–¥–∏—Ä! –¶–µ–ª—å –≤—Å–µ –±–ª–∏–∂–µ!'
                await bot.send_message(user_id, text)

            user_paid = bd_get_one(f"SELECT paid FROM user_paid WHERE user_id == '{user_id}'")
            if stage_three == 10 and user_paid != 'true':
                await user_send_pay(user_id)

        elif stage_two + 1 >= 5 and stage_one >= 10 + daily_plan:
            await bot.send_message(user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ "
                                            "'–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–Ω—å",
                                   reply_markup=user_day_done_kb())


# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def user_daily_q(user_id):

    stage_three = int(bd_get_one(f"SELECT stage_three FROM user_stage WHERE user_id == '{user_id}'"))
    user_paid = bd_get_one(f"SELECT paid FROM user_paid WHERE user_id == '{user_id}'")

    if stage_three == 10 and user_paid != 'true':
        await user_send_pay(user_id)

    else:
        stage_three = int(bd_get_one(f"SELECT stage_three FROM user_stage WHERE user_id = '{user_id}'"))
        if stage_three % 7 == 0:
            article = ARTICLES[stage_three/7]
            bd_set(f"UPDATE user_stage SET stage_three = '{stage_three + 1}'")
            await bot.send_message(user_id, article)

        else:
            question = get_question_text(user_id)
            check_trigger(user_id)
            bd_set(f"UPDATE user_stage SET stage_one = '{11}' WHERE user_id = '{user_id}'")
            await bot.send_message(user_id, question)


def get_question_text(user_id):
    plan = str(bd_get_one(f"SELECT plan FROM user_last_q WHERE user_id = '{user_id}'"))
    return QUESTIONS[plan]


# –ï–∂–µ–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def one_min_check():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–π—á–∞—Å
    time_now = get_time()
    time_now_h = time_now[0:2]
    time_now_m = time_now[3:5]

    # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = bd_get_many(f"SELECT user_id FROM user_stage")
    for user_id in users:

        user_reg_date = bd_get_one(f"SELECT date FROM user_register_date WHERE user_id = '{user_id}'")
        if user_reg_date != get_date():

            await afk_check(user_id)
            # –ü—Ä–æ–≤–µ—Ä–ø–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            time = bd_get_one(f"SELECT time_to_get_mes FROM user_stage WHERE user_id = '{user_id}'")
            delta_time = bd_get_one(f"SELECT time_delta_msk FROM user_stage WHERE user_id = '{user_id}'")

            time_h = time[0:2]
            time_m = time[3:5]

            if int(time_h) + int(delta_time) == int(time_now_h) and time_m == time_now_m:
                await user_daily_q(user_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

    when_to_call = loop.time() + delay  # delay -- –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    loop.call_at(when_to_call, my_callback)


def my_callback():
    asyncio.ensure_future(one_min_check())


delay = 60.0
loop = asyncio.get_event_loop()
my_callback()


# Trigger
def check_trigger(user_id):
    time_now = get_time()
    bd_set(f"UPDATE user_last_q SET time = '{time_now}' WHERE user_id = '{user_id}'")


# AFK check
async def afk_check(user_id):
    # 15 min check
    time = bd_get_one(f"SELECT time FROM user_last_q WHERE user_id = '{user_id}'")
    time_now = get_time()

    if str(time).find("first") != -1:
        time = str(time).replace("first:", "")
        time = datetime.timedelta(hours=int(time[0:2]), minutes=int(time[3:5]))
        time_now = datetime.timedelta(hours=int(time_now[0:2]), minutes=int(time_now[3:5]))

        if time_now - time >= datetime.timedelta(hours=2):
            await bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n")
            bd_set(f"UPDATE user_last_q SET time = '{0}' WHERE user_id = '{user_id}'")

    elif time == "0":
        pass

    else:
        time = datetime.timedelta(hours=int(time[0:2]), minutes=int(time[3:5]))
        time_now = datetime.timedelta(hours=int(time_now[0:2]), minutes=int(time_now[3:5]))

        if time_now - time >= datetime.timedelta(minutes=15):
            await bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n")
            bd_set(f"UPDATE user_last_q SET time = 'first:{time_now}' WHERE user_id = '{user_id}'")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def user_start_question(user_id, data):
    data = data.split(":")
    q_number = data[1]

    if q_number == '5':
        # –°–æ–æ–±—â–µ–Ω–∏–µ 1
        text = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü, –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–µ –±–æ–≥–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω!" \
               " –¢–µ–ø–µ—Ä—å —è –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±—ä—è—Å–Ω—é –ø—Ä–æ –º–µ—Ç–æ–¥ –∏ –∫–∞–∫ —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å."
        await bot.send_message(user_id, text)

        # –ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–æ—Ç–∞

        # –°–æ–æ–±—â–µ–Ω–∏–µ 2
        text_2 = "–í –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ, –ª–µ–∂–∞—Ç 6 –æ—Å–Ω–æ–≤," \
                 " 6 —Å—Ç–æ–ª–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è, —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–º —Ç–≤–æ–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏." \
                 " –ê –∫–∞–∫ –º—ã –∑–Ω–∞–µ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –æ–Ω –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–º, —á—Ç–æ –±—ã –∏ —Å—Ç–µ–Ω—ã —Å—Ç–æ—è–ª–∏ –∏ –∫—Ä—ã—à–∞ –Ω–µ –µ—Ö–∞–ª–∞)"
        await bot.send_message(user_id, text_2, reply_markup=user_reg_1_kb())

    bd_set(f"UPDATE user_stage SET stage_one = 'user_start_q:{int(q_number) + 1}' WHERE user_id = '{user_id}'")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(text_contains='user_reg_1')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id
    bd_set(f"UPDATE user_stage SET stage_one = '0' WHERE user_id = '{user_id}'")

    text = "–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —ç—Ç–∏ 6 –æ—Å–Ω–æ–≤:\n" \
           "*–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å* - —ç—Ç–æ –∂–∏–∑–Ω—å —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏." \
           " –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–∫–æ–π –∫–∞–∫–∞—è –æ–Ω–∞ –µ—Å—Ç—å. –ù–∞–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è," \
           " —Ç–æ —á—Ç–æ –º—ã –≤–∏–¥–∏–º –∏–ª–∏ —Ç–æ, —á—Ç–æ —Å –Ω–∞–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏, –Ω–æ –º—ã –ø—Ä–∏–∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ –µ—Å—Ç—å –∏ –Ω–µ –¥–æ–¥—É–º—ã–≤–∞–µ–º —Ç–æ–≥–æ —á–µ–≥–æ –Ω–µ—Ç." \
           " –ù–∞—à–∏ —Å—Ç—Ä–∞—Ö–∏, –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è –∏–ª–∏ –¥–æ–¥—É–º—ã–≤–∞–Ω–∏—è –Ω–µ –º–µ–Ω—è—é—Ç —Ñ–∞–∫—Ç–æ–≤." \
           " –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∂–∏–∑–Ω—å –≤ —Ü–µ–ª–æ–º." \
           " –ß—Ç–æ –±—ã –∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –∫–∞–∫–∏–µ –µ–≥–æ –æ—Ç–¥–∞–ª—è—é—Ç." \
           " –ö–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–ª–∏ –ª—é–¥–∏ –Ω–∞—Å –∑–∞—Ä—è–∂–∞—é—Ç, –∞ –∫–∞–∫–∏–µ –∏—Å—Ç–æ—â–∞—é—Ç." \
           " –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –ª—é–¥—è—Ö –≤ –∏—Ö –º–æ—Ç–∏–≤–∞—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö." \
           " –ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–π –∂–∏–∑–Ω–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —Å—Ç–æ–ª–ø–æ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏."

    await bot.send_message_text(user_id, text,
                                parse_mode=types.ParseMode.MARKDOWN, reply_markup=user_reg_2_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(text_contains='user_reg_2')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id

    text = '–ò–¥–µ–º –¥–∞–ª—å—à–µ, *–°–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏e* - —ç—Ç–æ –æ—Ç–∫–∞–∑ –≤—Å—Ç—É–ø–∞—Ç—å –≤ –∫–æ–Ω—Ñ—Ä–æ–Ω—Ç–∞—Ü–∏—é —Å —Å–æ–±–æ–π.' \
           ' –°–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–µ - —ç—Ç–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ –ª—é–±—ã—Ö —á—É–≤—Å—Ç–≤–∞—Ö,' \
           ' —ç–º–æ—Ü–∏—è—Ö –∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ "–≠—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—è, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è,' \
           ' –Ω–æ —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—è –≤ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç". –°–∞–º–æ–µ —Å—Ç—Ä–∞—à–Ω–æ–µ,' \
           ' —á—Ç–æ –º—ã –º–æ–∂–µ–º —É–±–µ–≥–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç –Ω–∞—à–∏—Ö —Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π,' \
           ' –Ω–æ —Ç–∞–∫ –∂–µ –∏ –æ—Ç –Ω–∞—à–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–ª–∏—á–∏—è, –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∞–º–±–∏—Ü–∏–π.' \
           ' –°–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —É—Å–ª–æ–≤–∏–µ–º –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.' \
           ' –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏—è —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–ø —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏'

    await bot.send_message_text(user_id, text,
                                parse_mode=types.ParseMode.MARKDOWN, reply_markup=user_reg_3_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(text_contains='user_reg_3')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id

    text = '–î–∞–ª—å—à–µ —É –Ω–∞—Å –∏–¥–µ—Ç *–°–∞–º–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –°–∞–º–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ*' \
           ' —á—Ç–æ —Ç—ã –Ω–µ—Å–µ—à—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤—Å–µ,' \
           ' —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.' \
           ' –ù–µ—Å–µ—à—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∑–∞ —Å–≤–æ–∏ –æ—à–∏–±–∫–∏, –∑–∞ —Å–≤–æ–µ —Å—á–∞—Å—Ç—å–µ.' \
           ' –ù–∏–∫—Ç–æ –Ω–µ –æ–±—è–∑–∞–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è.' \
           ' –°–∞–º–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è.' \
           ' –¢—ã –≤—Å–µ–≥–¥–∞ –∂–∏–≤–µ—à—å —Å–≤–æ–∏–º —É–º–æ–º. –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å–∞–º–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ—Ç–∏–º —Å—Ç–æ–ª–ø–æ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.'

    await bot.send_message_text(user_id, text,
                                parse_mode=types.ParseMode.MARKDOWN, reply_markup=user_reg_4_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(text_contains='user_reg_4')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id

    text = '*C–∞–º–æ–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ* - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –∏ —É–≤–∞–∂–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π,' \
           ' –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —É–º–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–∞—Ç—å –∏—Ö –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ–æ—Ä–º–µ.' \
           ' –°–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç—Ç–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ—è—Ç—å –∑–∞ —Å–µ–±—è, –æ—Ç–∫—Ä—ã—Ç–æ –±—ã—Ç—å —Å–æ–±–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–º,' \
           ' –Ω–µ –ø—Ä–∏—Ç–≤–æ—Ä—è—è—Å—å –∫–µ–º —Ç–æ –¥—Ä—É–≥–∏–º, —Ä–∞–¥–∏ —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ç–µ–±—è –æ–¥–æ–±—Ä—è–ª–∏ –∏–ª–∏ –ª—é–±–∏–ª–∏.' \
           ' –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–æ–∫–∞–ø—ã–≤–∞—è—Å—å –¥–æ —Å—É—Ç–∏, –±—Ä–æ—Å–∞—Ç—å –≤—ã–∑–æ–≤ —É—Å—Ç–æ—è–º,' \
           ' –≤—Å–µ–≥–¥–∞ –¥—É–º–∞—Ç—å –∑–∞ —Å–µ–±—è –∏ —Å—Ç–æ—è—Ç—å –Ω–∞ —Ç–æ–º —á—Ç–æ –¥—É–º–∞–µ—à—å —ç—Ç–æ –≤—Å–µ –∞–∫—Ç—ã —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!' \
           ' –ê –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞—Ç—å –≤—Å–µ–º —ç—Ç–∏–º - –Ω–∞–Ω–æ—Å–∏—Ç—å —É—â–µ—Ä–± —Å–∞–º–æ–æ—Ü–µ–Ω–∫–µ –Ω–∞ —Å–∞–º–æ–º –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ.' \
           ' –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–ø —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.'

    await bot.send_message_text(user_id, text,
                                parse_mode=types.ParseMode.MARKDOWN, reply_markup=user_reg_5_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ 5 —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(text_contains='user_reg_5')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id

    text = '*–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∂–∏–∑–Ω—å* - –æ–∑–Ω–∞—á–∞–µ—Ç –∂–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ, —Å—Ç–∞–≤–∏—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ,' \
           ' –¥–æ—Å—Ç–∏–∂–∏–º—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∏—Ö, –ø–æ–ø—É—Ç–Ω–æ –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É.' \
           ' –ù–æ –≤–∞–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ —Ü–µ–ª—è–º –∏ –∏—Ö –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ,' \
           ' –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—â–µ—Å—Ç–≤–æ–º —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã –º—ã—à–ª–µ–Ω–∏—è, –ª—É—á—à–µ —Å–ª—É—à–∞—Ç—å —Å–µ–±—è.' \
           ' –¢–∞–∫ –∂–∏–∑–Ω—å —Å—Ç–∞–Ω–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –∏ —è—Ä—á–µ. –ù–µ –∑–∞–±—ã–≤–∞–π –≤–Ω–æ—Å–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏,' \
           ' –Ω–µ –≤—Å–µ–≥–¥–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –±—ã–≤–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–º. ' \
           '–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—è—Ç—ã–º —Å—Ç–æ–ª–ø–æ–º —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.'

    await bot.send_message_text(user_id, text,
                                parse_mode=types.ParseMode.MARKDOWN, reply_markup=user_reg_6_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞–ª–µ–µ" –ø–æ—Å–ª–µ 6 —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(text_contains='user_reg_6')
async def user_set_time(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    user_id = callback.from_user.id

    text = '*–õ–∏—á–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å*\n' \
           '–≠—Ç–æ –∂–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ —Å–æ —Å–≤–æ–∏–º–∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏, —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏, –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è.' \
           ' –ö–æ–≥–¥–∞ –º—ã –ø–æ—Å—Ç—É–ø–∞–µ–º —Ç–∞–∫, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –Ω–∞—à–∏–º –º–æ—Ä–∞–ª—å–Ω—ã–º —É—Å—Ç–æ—è–º –∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º,' \
           ' –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –º–µ–Ω—å—à–µ —Å–µ–±—è —É–≤–∞–∂–∞—Ç—å. –ï—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∞–µ–º —Ç–∞–∫ —á–∞—Å—Ç–æ, —Ç–æ —ç—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∏–≤—ã—á–∫—É.' \
           ' –ö–æ–≥–¥–∞ –º—ã –∏—Å—Å–ª–µ–¥—É–µ–º —Å–≤–æ—é –∂–∏–∑–Ω—å –º—ã —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏–º —Ç–∞–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è,' \
           ' –æ–±—ã—á–Ω–æ –º—ã –∏—Ö –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ –º—ã –∫–∞–∫ —Ä–∞–∑ –∑–∞–π–º–µ–º—Å—è —Ç–∞–∫–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)\n' \
           '–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —à–µ—Å—Ç–æ–π —Å—Ç–æ–ª–ø —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.\n\n' \
           '–§—É—É—Ö –≤—ã–¥–æ—Ö–Ω—É–ª–∏.\n\n' \
           '–í –±–æ—Ç–µ –º—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–ø —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.' \
           ' –£–∂–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å —Ç—ã —É–∑–Ω–∞–µ—à—å –æ —Å–µ–±–µ –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ, –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –º—ã—Å–ª–∏,' \
           ' —É–ª—É—á—à–∏—Ç—Å—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å. –ò —ç—Ç–æ –≤—Å–µ–≥–æ –∑–∞ 7 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å!'

    await bot.send_message_text(user_id, text, parse_mode=types.ParseMode.MARKDOWN)

    text_2 = "–í–∞–∂–Ω–æ –∑–∞–∫–∞—á–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ! –ù–µ –Ω–∞–¥–æ —Å–∏–¥–µ—Ç—å —Ä–∞–∑–º—ã—à–ª—è—Ç—å –∏–ª–∏ –≥—É–≥–ª–∏—Ç—å (–¥–∞ –¥–∞ –±—ã–≤–∞–µ—Ç –∏ —Ç–∞–∫)." \
             " –ü–∏—à–∏ –ø–µ—Ä–≤–æ–µ —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –±—ã –ø–æ–¥—Ö–æ–¥–∏–ª–æ –ø–æ —Å–º—ã—Å–ª—É." \
             " –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç 6 –¥–æ 10 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."
    await bot.send_message(user_id, text_2)

    text_3 = 'P.S. –í—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∏—Ö –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ —Ç—ã,' \
             ' –ø–æ—ç—Ç–æ–º—É –ø–∏—à–∏ —á–µ—Å—Ç–Ω–æ, –≤—Å–µ —á—Ç–æ –∏–¥–µ—Ç –∏–∑–Ω—É—Ç—Ä–∏.   –ñ–µ–ª–∞—é —É–¥–∞—á–∏, –º–∏—Ä–∞ –∏ –ª—é–±–≤–∏ —Ç–µ–±–µ! –ï—â–µ —É–≤–∏–¥–∏–º—Å—è)'
    await bot.send_message(user_id, text_3)

    text_4 = "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Ç–µ–±–µ, –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º!" \
             " –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è."
    await bot.send_message(user_id, text_4)
    from comands_handlers import register_time
    await register_time(user_id)


